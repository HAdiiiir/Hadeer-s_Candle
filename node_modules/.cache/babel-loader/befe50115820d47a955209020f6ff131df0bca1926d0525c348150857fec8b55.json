{"ast":null,"code":"import express from \"express\";\nimport mongoose from \"mongoose\";\nimport cors from \"cors\";\nimport dotenv from \"dotenv\";\nimport cookieParser from \"cookie-parser\";\nimport { productRoutes } from \"./routes/productRoutes\";\nimport { categoryRoutes } from \"./routes/categoryRoutes\";\nimport { tagRoutes } from \"./routes/tagRoutes\";\nimport { userRoutes } from \"./routes/userRoutes\";\nimport { authRoutes } from \"./routes/authRoutes\";\nimport { orderRoutes } from \"./routes/orderRoutes\";\nimport { cartRoutes } from \"./routes/cartRoutes\";\nimport { reviewRoutes } from \"./routes/reviewRoutes\";\nimport { errorHandler } from \"./middleware/errorMiddleware\";\ndotenv.config();\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/hadeers-candle\";\n\n// Middleware\napp.use(cors({\n  origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n  credentials: true\n}));\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cookieParser());\n\n// Routes\napp.use(\"/api/products\", productRoutes);\napp.use(\"/api/categories\", categoryRoutes);\napp.use(\"/api/tags\", tagRoutes);\napp.use(\"/api/users\", userRoutes);\napp.use(\"/api/auth\", authRoutes);\napp.use(\"/api/orders\", orderRoutes);\napp.use(\"/api/cart\", cartRoutes);\napp.use(\"/api/reviews\", reviewRoutes);\n\n// Health check route\napp.get(\"/health\", (req, res) => {\n  res.status(200).json({\n    status: \"ok\",\n    message: \"Server is running\"\n  });\n});\n\n// Error handling middleware\napp.use(errorHandler);\n\n// Connect to MongoDB and start server\nmongoose.connect(MONGODB_URI).then(() => {\n  console.log(\"Connected to MongoDB\");\n  app.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n}).catch(error => {\n  console.error(\"Failed to connect to MongoDB:\", error);\n  process.exit(1);\n});\nexport default app;","map":{"version":3,"names":["express","mongoose","cors","dotenv","cookieParser","productRoutes","categoryRoutes","tagRoutes","userRoutes","authRoutes","orderRoutes","cartRoutes","reviewRoutes","errorHandler","config","app","PORT","process","env","MONGODB_URI","use","origin","FRONTEND_URL","credentials","json","urlencoded","extended","get","req","res","status","message","connect","then","console","log","listen","catch","error","exit"],"sources":["/home/hader/Hadeer-s_Candle/src/index.ts"],"sourcesContent":["import express from \"express\"\nimport mongoose from \"mongoose\"\nimport cors from \"cors\"\nimport dotenv from \"dotenv\"\nimport cookieParser from \"cookie-parser\"\nimport { productRoutes } from \"./routes/productRoutes\"\nimport { categoryRoutes } from \"./routes/categoryRoutes\"\nimport { tagRoutes } from \"./routes/tagRoutes\"\nimport { userRoutes } from \"./routes/userRoutes\"\nimport { authRoutes } from \"./routes/authRoutes\"\nimport { orderRoutes } from \"./routes/orderRoutes\"\nimport { cartRoutes } from \"./routes/cartRoutes\"\nimport { reviewRoutes } from \"./routes/reviewRoutes\"\nimport { errorHandler } from \"./middleware/errorMiddleware\"\n\ndotenv.config()\n\nconst app = express()\nconst PORT = process.env.PORT || 5000\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://localhost:27017/hadeers-candle\"\n\n// Middleware\napp.use(\n  cors({\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    credentials: true,\n  }),\n)\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(cookieParser())\n\n// Routes\napp.use(\"/api/products\", productRoutes)\napp.use(\"/api/categories\", categoryRoutes)\napp.use(\"/api/tags\", tagRoutes)\napp.use(\"/api/users\", userRoutes)\napp.use(\"/api/auth\", authRoutes)\napp.use(\"/api/orders\", orderRoutes)\napp.use(\"/api/cart\", cartRoutes)\napp.use(\"/api/reviews\", reviewRoutes)\n\n// Health check route\napp.get(\"/health\", (req, res) => {\n  res.status(200).json({ status: \"ok\", message: \"Server is running\" })\n})\n\n// Error handling middleware\napp.use(errorHandler)\n\n// Connect to MongoDB and start server\nmongoose\n  .connect(MONGODB_URI)\n  .then(() => {\n    console.log(\"Connected to MongoDB\")\n    app.listen(PORT, () => {\n      console.log(`Server running on port ${PORT}`)\n    })\n  })\n  .catch((error) => {\n    console.error(\"Failed to connect to MongoDB:\", error)\n    process.exit(1)\n  })\n\nexport default app\n\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,YAAY,MAAM,eAAe;AACxC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,YAAY,QAAQ,8BAA8B;AAE3DV,MAAM,CAACW,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGf,OAAO,CAAC,CAAC;AACrB,MAAMgB,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrC,MAAMG,WAAW,GAAGF,OAAO,CAACC,GAAG,CAACC,WAAW,IAAI,0CAA0C;;AAEzF;AACAJ,GAAG,CAACK,GAAG,CACLlB,IAAI,CAAC;EACHmB,MAAM,EAAEJ,OAAO,CAACC,GAAG,CAACI,YAAY,IAAI,uBAAuB;EAC3DC,WAAW,EAAE;AACf,CAAC,CACH,CAAC;AACDR,GAAG,CAACK,GAAG,CAACpB,OAAO,CAACwB,IAAI,CAAC,CAAC,CAAC;AACvBT,GAAG,CAACK,GAAG,CAACpB,OAAO,CAACyB,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CX,GAAG,CAACK,GAAG,CAAChB,YAAY,CAAC,CAAC,CAAC;;AAEvB;AACAW,GAAG,CAACK,GAAG,CAAC,eAAe,EAAEf,aAAa,CAAC;AACvCU,GAAG,CAACK,GAAG,CAAC,iBAAiB,EAAEd,cAAc,CAAC;AAC1CS,GAAG,CAACK,GAAG,CAAC,WAAW,EAAEb,SAAS,CAAC;AAC/BQ,GAAG,CAACK,GAAG,CAAC,YAAY,EAAEZ,UAAU,CAAC;AACjCO,GAAG,CAACK,GAAG,CAAC,WAAW,EAAEX,UAAU,CAAC;AAChCM,GAAG,CAACK,GAAG,CAAC,aAAa,EAAEV,WAAW,CAAC;AACnCK,GAAG,CAACK,GAAG,CAAC,WAAW,EAAET,UAAU,CAAC;AAChCI,GAAG,CAACK,GAAG,CAAC,cAAc,EAAER,YAAY,CAAC;;AAErC;AACAG,GAAG,CAACY,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/BA,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;IAAEM,MAAM,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAoB,CAAC,CAAC;AACtE,CAAC,CAAC;;AAEF;AACAhB,GAAG,CAACK,GAAG,CAACP,YAAY,CAAC;;AAErB;AACAZ,QAAQ,CACL+B,OAAO,CAACb,WAAW,CAAC,CACpBc,IAAI,CAAC,MAAM;EACVC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;EACnCpB,GAAG,CAACqB,MAAM,CAACpB,IAAI,EAAE,MAAM;IACrBkB,OAAO,CAACC,GAAG,CAAC,0BAA0BnB,IAAI,EAAE,CAAC;EAC/C,CAAC,CAAC;AACJ,CAAC,CAAC,CACDqB,KAAK,CAAEC,KAAK,IAAK;EAChBJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACrDrB,OAAO,CAACsB,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AAEJ,eAAexB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}